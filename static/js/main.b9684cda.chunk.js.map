{"version":3,"sources":["Components/Home.js","Components/SplashScreen.js","Components/Top.js","Components/Bottom.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["Home","home","useRef","useEffect","TweenMax","to","current","opacity","y","ease","Power3","easeOut","className","css","ref","SplashScreen","setIsSplashScreenDone","rootBackground","myName","backgroundFill","myNameAnimation","setTimeout","TimelineMax","easeIn","scaleY","easeInOut","eventCallback","style","display","clearTimeout","Top","top","Bottom","About","App","useState","isSplashScreenDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kzBAKe,SAASA,IACtB,IAAMC,EAAQC,iBAAO,MAcrB,OAZAC,qBAAU,WACRC,IAASC,GACPJ,EAAKK,QACL,EACA,CACEC,QAAS,EACTC,EAAG,GACHC,KAAMC,IAAOC,YAGhB,IAGD,yBAAKC,UAAWC,YAAF,MAIZ,yBAAKD,UAAWC,YAAF,OAQd,wBAAIC,IAAMb,EAAOW,UAAWC,YAAF,MASxB,0CAGA,4C,o9BCxCO,SAASE,EAAT,GAAkD,IAA1BC,EAAyB,EAAzBA,sBACjCC,EAAiBf,iBAAO,MACxBgB,EAAShB,iBAAO,MAChBiB,EAAiBjB,iBAAO,MAsC5B,OApCAC,qBAAU,WACR,IAAMiB,EAAkBC,YAAW,YACxB,IAAIC,KACVjB,GACDa,EAAOZ,QACP,IACA,CACEC,QAAS,EACTC,EAAG,GACHC,KAAMC,IAAOa,SAEflB,GACAc,EAAeb,QACf,GACA,CACEkB,OAAQ,KACRf,KAAMC,IAAOe,YAEfpB,GACAc,EAAeb,QACf,EACA,CACEkB,OAAQ,EACRf,KAAMC,IAAOe,YAEfC,cAAc,cAAc,WAC5BT,EAAeX,QAAQqB,MAAMC,QAAU,OACvCZ,GAAsB,QAEvB,KAEH,OAAO,WACLa,aAAaT,MAEd,IAGD,yBAAKN,IAAKG,EAAgBL,UAAWC,YAAF,MAMjC,yBAAKC,IAAKK,EAAgBP,UAAWC,YAAF,OAQnC,yBAAKD,UAAWC,YAAF,MAKZ,yBAAKD,UAAWC,YAAF,MAQZ,uBAAGC,IAAKI,EAAQN,UAAWC,YAAF,MAAzB,0B,uhBCrEK,SAASiB,IACtB,IAAMC,EAAM7B,iBAAO,MAanB,OAXAC,qBAAU,WACRC,IAASC,GACP0B,EAAIzB,QACJ,EACA,CACEC,QAAS,EACTE,KAAMC,IAAOC,YAGhB,IAGD,yBAAKG,IAAMiB,EAAMnB,UAAWC,YAAF,MAGxB,yBAAKD,UAAWC,YAAF,MAQZ,yBAAKD,UAAWC,YAAF,MAMZ,wCAGA,kDAGA,8C,2dCtCK,SAASmB,IACtB,IAAMD,EAAM7B,iBAAO,MAanB,OAXAC,qBAAU,WACRC,IAASC,GACP0B,EAAIzB,QACJ,GACA,CACEC,QAAS,EACTE,KAAMC,IAAOa,WAGhB,IAGD,yBAAKT,IAAMiB,EAAMnB,UAAWC,YAAF,MAExB,yBAAKD,UAAWC,YAAF,MASZ,yBAAKD,UAAWC,YAAF,MAAd,kB,0kGC5BO,SAASoB,IACtB,OACE,6BACE,6BACE,wBAAIrB,UAAWC,YAAF,MAAb,SAMA,wBAAID,UAAWC,YAAF,MAAb,uBAYF,6BACE,uBAAGD,UAAWC,YAAF,MAAZ,2GAMF,yBAAKD,UAAWC,YAAF,MASZ,6BACE,yBAAKD,UAAWC,YAAF,MAMZ,wBAAID,UAAWC,YAAF,MAAb,sBAMF,6BACE,uBAAGD,UAAWC,YAAF,MAAZ,2BAOJ,6BACE,yBAAKD,UAAWC,YAAF,MAMZ,wBAAID,UAAWC,YAAF,MAAb,qBAMF,6BACE,uBAAGD,UAAWC,YAAF,MAAZ,0BAOA,uBAAGD,UAAWC,YAAF,MAAZ,4BASJ,6BACE,yBAAKD,UAAWC,YAAF,MAMZ,wBAAID,UAAWC,YAAF,MAAb,2BAMF,6BACE,uBAAGD,UAAWC,YAAF,MAAZ,SAMA,uBAAGD,UAAWC,YAAF,MAAZ,qBAOA,uBAAGD,UAAWC,YAAF,MAAZ,SAMA,uBAAGD,UAAWC,YAAF,MAAZ,iCAOA,uBAAGD,UAAWC,YAAF,MAAZ,UAMA,uBAAGD,UAAWC,YAAF,MAAZ,8B,kSC1FGqB,MAtCf,WAAgB,IAAD,EACyCC,oBAAS,GADlD,mBACLC,EADK,KACepB,EADf,KAGb,OACE,yBAAKJ,UAAU,aACb,kBAACG,EAAD,CAAcC,sBAAuBA,IACnCoB,EACA,6BACE,gCACE,kBAACN,EAAD,OAGF,0BAAMlB,UAAWC,YAAF,MAKb,6BAASD,UAAWC,YAAF,MAGhB,kBAACb,EAAD,OAEF,iCACE,kBAACiC,EAAD,QAIJ,gCACE,kBAACD,EAAD,QAIJ,OC9BYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b9684cda.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { css } from 'emotion';\n\nimport { TweenMax, Power3 } from 'gsap';\n\nexport default function Home() {\n  const home  = useRef(null);\n\n  useEffect(() => {\n    TweenMax.to(\n      home.current,\n      3,\n      {\n        opacity: 1,\n        y: 30,\n        ease: Power3.easeOut\n      }\n    );\n  }, []);\n\n  return (\n    <div className={css`\n      position: relative;\n      top: 20vh;\n    `}>\n      <div className={css`\n        position: absolute;\n        top: 50%;\n        left: 0;\n        right: 0;\n        height: 100px;\n      `}>\n      </div>\n      <h1 ref={ home } className={css`\n        opacity: 0;\n        color: #fff;\n        text-align: center;\n        margin: 0;\n        font-style: italic;\n        font-size: 8rem;\n        text-shadow: 5px 5px #474787;\n      `}>\n        <div>\n          front-end\n        </div>\n        <div>\n          developer\n        </div>\n      </h1>\n\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react';\nimport { css } from 'emotion';\n\nimport { Power3, TimelineMax } from 'gsap';\n\nexport default function SplashScreen({ setIsSplashScreenDone }) {\n  let rootBackground = useRef(null);\n  let myName = useRef(null);\n  let backgroundFill = useRef(null);\n\n  useEffect(() => {\n    const myNameAnimation = setTimeout(() => {\n      var tl = new TimelineMax();\n      tl.to(\n        myName.current,\n        1.5,\n        {\n          opacity: 0,\n          y: 30,\n          ease: Power3.easeIn\n        }\n      ).to(\n        backgroundFill.current,\n        .5,\n        {\n          scaleY: .005,\n          ease: Power3.easeInOut\n        }\n      ).to(\n        backgroundFill.current,\n        1,\n        {\n          scaleY: 1,\n          ease: Power3.easeInOut\n        } //, \"+=0.2\" ~> add delay if neccessary\n      ).eventCallback(\"onComplete\", () => {\n        rootBackground.current.style.display = \"none\";\n        setIsSplashScreenDone(true);\n      })\n    }, 1000);\n    \n    return () => {\n      clearTimeout(myNameAnimation)\n    };\n  }, []);\n\n  return (\n    <div ref={rootBackground} className={css`\n      position: fixed;\n      width: 100%;\n      height: 100%;\n      background-color: #2c2c54;\n    `}>\n      <div ref={backgroundFill} className={css`\n        position: fixed;\n        height: 100%;\n        transform: scaleY(0);\n        width: 100%;\n        background-color: #fff;\n      `}>\n      </div>\n      <div className={css`\n        position: fixed;\n        top: 50%;\n        width: 100%;\n      `}>\n        <div className={css`\n          position: relative;\n          margin: 0 auto;\n          width: 200px;\n          height: 30px;\n          overflow: hidden;\n          top: -13px;\n        `}>\n          <p ref={myName} className={css`\n            position: absolute;\n            margin: 0;\n            width: 100%;\n            top: 0;\n            color: #fff;\n          `}>\n            Franco Clive Maleke\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react';\nimport { css } from 'emotion';\n\nimport { TweenMax, Power3 } from 'gsap';\n\nexport default function Top() {\n  const top = useRef(null);\n\n  useEffect(() => {\n    TweenMax.to(\n      top.current,\n      2,\n      {\n        opacity: 1,\n        ease: Power3.easeOut\n      }\n    )\n  }, []);\n\n  return (\n    <div ref={ top } className={css`\n      opacity: 0;\n    `}>\n      <div className={css`\n        position: absolute;\n        left: 0; \n        right: 0;\n        margin: 0 auto;\n        width: 80%;\n        border-bottom: 2px solid #474787;\n      `}>\n        <div className={css`\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin: .5rem 0;\n        `}>\n          <p>\n            porftolio\n          </p>\n          <p>\n            franco clive maleke\n          </p>\n          <p>\n            &#128054;\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react';\nimport { css } from 'emotion';\n\nimport { TweenMax, Power3 } from 'gsap';\n\nexport default function Bottom() {\n  const top = useRef(null);\n\n  useEffect(() => {\n    TweenMax.to(\n      top.current,\n      .5,\n      {\n        opacity: 1,\n        ease: Power3.easeIn\n      }\n    )\n  }, []);\n\n  return (\n    <div ref={ top } className={css`\n    `}>\n      <div className={css`\n        position: absolute;\n        left: 0; \n        right: 0;\n        margin: 0 auto;\n        width: 80%;\n        border-top: 2px solid #474787;\n\n      `}>\n        <div className={css`\n          margin: .7rem 0;\n          font-size: 1.5rem;\n          text-align: center;\n        `}>&#128075;</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { css } from 'emotion';\n\nexport default function About() {\n  return (\n    <div>\n      <div>\n        <h3 className={css`\n          display: inline-block;\n          font-size: 4rem;\n          margin: .5rem 0;\n          `}>about\n        </h3>\n        <h3 className={css`\n          font-size: 2rem;\n          display: inline-block;\n          margin: .5rem .5rem;\n          font-style: italic;\n          color: #474787;\n          height: 20px;\n        `}>\n          | əˈbout\n        </h3>\n      </div>\n\n      <div>\n        <p className={css`\n          font-size: 3rem;\n          margin: 0;\n          `}>I'm a front-end developer based in batam. Currently working as a game developer in a company in batam.</p>\n      </div>\n\n      <div className={css`\n        display: flex;\n        flex-direction: column;\n        margin-top: 20px;\n\n        > div {\n          margin: 20px 0;\n        }\n      `}>\n        <div>\n          <div className={css`\n            display: inline-block;\n            background-color: #474787;\n            color: #fff;\n            margin-bottom: 10px;\n          `}>\n            <h5 className={css`\n              font-size: 2rem;\n              margin: 0;\n            `}>what i usually do</h5>\n          </div>\n\n          <div>\n            <p className={css`\n              font-size: 1.5rem;\n              margin: 0;\n            `}>front-end development</p>\n          </div>\n        </div>\n\n        <div>\n          <div className={css`\n            display: inline-block;\n            background-color: #474787;\n            color: #fff;\n            margin-bottom: 10px;\n          `}>\n            <h5 className={css`\n              font-size: 2rem;\n              margin: 0;\n            `}>what tech i used</h5>\n          </div>\n\n          <div>\n            <p className={css`\n              font-size: 1.5rem;\n              margin: 0;\n            `}>\n              unity engine (at work)\n            </p>\n\n            <p className={css`\n              font-size: 1.5rem;\n              margin: 0;\n            `}>\n              react js (self taught)\n            </p>\n          </div>\n        </div>\n\n        <div>\n          <div className={css`\n            display: inline-block;\n            margin-bottom: 10px;\n            background-color: #474787;\n            color: #fff;\n          `}>\n            <h5 className={css`\n              font-size: 2rem;\n              margin: 0;\n            `}>contact & social media</h5>\n          </div>\n\n          <div>\n            <p className={css`\n              font-size: 1rem;\n              color: #474787;\n            `}>\n              phone \n            </p>\n            <p className={css`\n              font-size: 1.3rem;\n              margin: 0;\n            `}>\n              +62-852-6781-9928\n            </p>\n\n            <p className={css`\n              font-size: 1rem;\n              color: #474787;\n            `}>\n              email\n            </p>\n            <p className={css`\n              font-size: 1.3rem;\n              margin: 0;\n            `}>\n              francoclivemaleke23@gmail.com\n            </p>\n\n            <p className={css`\n              font-size: 1rem;\n              color: #474787;\n            `}>\n              github\n            </p>\n            <p className={css`\n              font-size: 1.3rem;\n              margin: 0;\n            `}>\n              github.com/malekeclive\n            </p>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { css } from 'emotion';\n\nimport Home from './Components/Home';\nimport SplashScreen from './Components/SplashScreen';\nimport Top from './Components/Top';\nimport Bottom from './Components/Bottom';\nimport About from './Components/About';\n\nfunction App() {\n  const [ isSplashScreenDone, setIsSplashScreenDone ] = useState(false);\n\n  return (\n    <div className=\"container\">\n      <SplashScreen setIsSplashScreenDone={setIsSplashScreenDone} />\n      { isSplashScreenDone ? \n        <div>\n          <header>\n            <Top />\n          </header>\n\n          <main className={css`\n            display: flex;\n            flex-direction: column;\n            margin: 10px 10%;\n          `}>\n            <section className={css`\n              height: 100vh;\n            `}>\n              <Home />\n            </section>\n            <section>\n              <About />\n            </section>\n          </main>\n          \n          <footer>\n            <Bottom />\n          </footer>\n        </div>\n      :\n        null\n      } \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}